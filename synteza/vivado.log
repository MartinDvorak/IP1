#-----------------------------------------------------------
# Vivado v2017.4 (64-bit)
# SW Build 2086221 on Fri Dec 15 20:54:30 MST 2017
# IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
# Start of session at: Tue Jan 23 01:37:31 2018
# Process ID: 15892
# Current directory: /home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth
# Command line: vivado -mode batch -source Vivado.tcl
# Log file: /home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/vivado.log
# Journal file: /home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/vivado.jou
#-----------------------------------------------------------
source Vivado.tcl
# global env
# set FIRMWARE_BASE $env(FIRMWARE_BASE)
# set TOP_LEVEL_ENT $env(TOP_LEVEL_ENT)
# set SYNTH_FLAGS(PROJ_ONLY) "0"
# set SYNTH_FLAGS(MODULE) $TOP_LEVEL_ENT
# set SYNTH_FLAGS(OUTPUT) $TOP_LEVEL_ENT
# set SYNTH_FLAGS(FPGA)   "xcvu7p-flvb2104-2-i"
# set SYNTH_FLAGS(CONSTR) "Vivado.xdc"
# set SYNTH_FLAGS(OOC_MODE) "1"
# set xdc_text "create_clock -period 4.000 \[get_ports CLK\]\n"
# set fileId [open "Vivado.xdc" "w"]
# puts -nonewline $fileId $xdc_text
# close $fileId
# set PACKAGES   ""
# set MOD        ""
# set COMPONENTS [list  [list $TOP_LEVEL_ENT   ".."    "FULL"]]
# set HIERARCHY(PACKAGES)    $PACKAGES
# set HIERARCHY(MOD)         $MOD
# set HIERARCHY(COMPONENTS)  $COMPONENTS
# source $FIRMWARE_BASE/build/Vivado.inc.tcl
## source $FIRMWARE_BASE/build/Shared.tcl
### proc GenStr {NUM CH} {
###    set str $CH
###    for {set i 0} {$i<$NUM} {incr i} {
###       set str [format "%s%s" $str $CH]
###    }
###    return $str
### }
### proc PrintLabel {LABEL} {
###    set lines [GenStr 70 "-"]
###    set space [GenStr [expr [expr 65 - [string length $LABEL]] / 2] " "]
###    puts "$lines\n$space $LABEL\n$lines"
### }
### proc SimplPath {PATH} {
###    set original $PATH
### 
###    set FIRST_CHAR [ string index $PATH 0 ]
###    if { $FIRST_CHAR == "/" } {
###       set FULLPATH "$PATH"
###    } else {
###       set FULLPATH [join [list [ pwd ] "$PATH"] "/" ]
###    }
### 
###    # Subsitute /./ or // by /
###    set RE "/\\./|//"
###    while {[regexp $RE $FULLPATH]} {
###       regsub $RE $FULLPATH "/" FULLPATH
###    }
### 
###    # Regular expression:
###    # / followed by
###    # one or more repetitions of
###    #   zero or one non-slash character followed by
###    #   one non-slash non-dot character
###    # followed by / followed by .. followed by /
###    set RE "/(\[^/\]?\[^/.\])+/\\.\\./"
### 
###    while {[regexp $RE $FULLPATH]} {
###       regsub $RE $FULLPATH "/" FULLPATH
###    }
### 
### 
###    return $FULLPATH
### }
### proc ProcessMacros {SRC DST SUBSTS} {
###    upvar 1 $SUBSTS SUBSTS_VAR
### 
###    set srch [open $SRC]
###    set dsth [open $DST w]
### 
###    puts $dsth "-- This file was generated by translation system."
###    puts $dsth "-- Do not commit it into source code archive.\n"
### 
###    while {[gets $srch line] >= 0} {
###       # For each line in the source file
### 
###       set RE "-- MACRO INSERT *"
###       if {[regexp -- $RE $line]} {
###          # If there is any macro on this line
###          set found 0
###          foreach i $SUBSTS {
###             # For each item in the list of substitutions
###             set fname [lindex $i 0]
###             set RE "-- MACRO INSERT $fname*"
### 
###             if {[regexp -- $RE $line]} {
###                # If we found correct substitution
###                set found 1
###                set start 0
###                set fname [lindex $i 1]
###                set funh [open $fname]
###                while {[gets $funh substline] >= 0} {
###                   if {$start == 1} {
###                      puts $dsth $substline
###                   }
### 
###                   set RE "-- MACRO START*"
###                   if {[regexp -- $RE $substline]} {
###                      set start 1
###                   }
###                }
###                if {$start == 0} {
###                   puts "Warning: This macro has not been expanded:"
###                   puts $line
###                   puts $dsth $line
###                   puts $dsth "-- $fname does not contain MACRO START macro!"
###                }
###                close $funh
###             } 
###          }
###          if {$found == 0} {
###             puts "Warning: This macro has not been expanded:"
###             puts $line
###             puts $dsth $line
###             puts $dsth "-- Cannot find this macro in the list of substitutions!"
###          }
###       } else {
###          # If there is no macro
###          puts $dsth $line
###       }
###    }
### 
###    close $srch
###    close $dsth
### }
### proc BoolVerilog {BOOL} {
###    if {$BOOL == "true" || $BOOL == 1} {
###       return "1'b1"
###    } else {
###       return "1'b0"
###    }
### }
### proc hex2bin {hex} {
###    set t {
###       0 0 1 1 2 10 3 11 4 100 5 101 6 110 7 111
###       8 1000 9 1001 a 1010 b 1011 c 1100 d 1101 e 1110 f 1111
###    }
###    regsub {^0[xX]} $hex {} hex
###    return [string map -nocase $t $hex]
### }
### proc dec2bin {dec} {
###    set res {}
###    while {$dec>0} {
###       set res [expr {$dec%2}]$res
###       set dec [expr {$dec/2}]
###    }
###    if {$res == {}} {set res 0}
###    return $res
### }
### proc VectorVerilog {VALUE} {
###    set width [string range $VALUE 0 [expr {[string first "'" $VALUE]} - 1]]
###    set type [string range $VALUE [expr {[string first "'" $VALUE] + 1}] \
###       [expr {[string first "'" $VALUE] + 1}]]
###    set output [string range $VALUE [expr {[string first "'" $VALUE] + 2}] end]
### 
###    if {$type == "b"} {
###       return "\"$output\""
###    } else {
###       if {[expr $width % 8] == 0 && $type == "h"} {
###          return "X\"$output\""
###       } else {
###          if {$type == "h"} {
###             set ret [hex2bin $output]
###          } elseif {$type == "d"} {
###             set ret [dec2bin $output]
###          }
###          for {set i [string length $ret]} {$i < $width} {incr i} {
###             append ret "0"
###          }
###          return $ret
###       }
###    }
###    error "Function VectorVerilog couldn't transform value"
### }
### proc ApplyToMods {MODULE COMMAND FILES} {
###    upvar 1 $FILES FILES_VAR
###    set eval_cmd "$COMMAND \$i"
### 
###    foreach i $MODULE {
###       if { [ llength $i ] == 1 } {
###          set i [SimplPath $i]
###       } else {
###          set i [list [lindex $i 0] [SimplPath [lindex $i 1]]]
###       }
###       if { [lsearch $FILES_VAR $i] == -1 } {
###          eval $eval_cmd
###          set FILES_VAR [linsert $FILES_VAR 0 $i]
###       } else {
###       }
###    }
### }
### proc ApplyToComponents {COMPONENTS COMMAND FILES SV_LIBS {LEVEL "1"} } {
###    upvar 1 $FILES FILES_VAR
###    upvar 1 $SV_LIBS SV_LIBS_VAR
###    foreach i $COMPONENTS {
###       ApplyToComponent $i $COMMAND FILES_VAR SV_LIBS_VAR $LEVEL
###    }
### }
### proc ApplyToComponent {COMPONENT COMMAND FILES SV_LIBS LEVEL} {
###    upvar 1 $FILES FILES_VAR
###    upvar 1 $SV_LIBS SV_LIBS_VAR
### 
###    # variable setting -----------------------------
###    set mod_str          [lindex $COMPONENT 0]
###    set ENTITY           [lindex $COMPONENT 0]
###    set mod_base         [lindex $COMPONENT 1]
###    set ENTITY_BASE      [lindex $COMPONENT 1]
###    set ENTITY_MODFILE   "$ENTITY_BASE/Modules.tcl"
###    set mod_base_str     [format "%s%s" $mod_str "_BASE"]
###    set $mod_base_str    $mod_base
###    set $mod_str         [lindex $COMPONENT 2]
###    set ARCHGRP          [lindex $COMPONENT 2]
### 
###    # label printing ------------------------------
###    if { $LEVEL == 1 } {
###       PrintLabel $mod_str
###    }
### 
###    # script execution ----------------------------
###    set MOD ""
###    set SV_LIB ""
###    set COMPONENTS ""
###    set PACKAGES ""
### 
###    global env
###    if {[info exists env(SECOND_PASS)]} {
###       # Environment can disable compilation of additional stuff in Modules.tcl
###       set SECOND_PASS $env(SECOND_PASS)
###    }
### 
###    # Get hierarchy info
###    source $mod_base/Modules.tcl
### 
###    # collect values of SV_LIB
###    foreach i $SV_LIB {
###       set SV_LIBS_VAR [linsert $SV_LIBS_VAR 0 $i]
###    }
### 
###    # apply command to local packages -------------
###    ApplyToMods $PACKAGES $COMMAND FILES_VAR
### 
###    # apply command to subcomponents --------------
###    if { $COMPONENTS != "" } {
###       ApplyToComponents $COMPONENTS $COMMAND FILES_VAR SV_LIBS_VAR [expr $LEVEL + 1]
###    }
### 
###    # apply command to local modules --------------
###    ApplyToMods $MOD $COMMAND FILES_VAR
### 
###    # Call synthetizer-specific code (if defined)
###    if {[info procs EvalComp] eq "EvalComp"} {
###       EvalComp $ENTITY $ENTITY_BASE $ARCHGRP
###    }
### }
### proc ApplyToInstances {COMPONENTS COMMAND PARAMS {PATH ""} {LEVEL "1"} } {
###    upvar 1 $PARAMS param_array
###    foreach i $COMPONENTS {
###       ApplyToInstance $i $COMMAND param_array $PATH $LEVEL
###    }
### }
### proc ApplyToInstance {COMPONENT COMMAND PARAMS PATH LEVEL} {
###    upvar 1 $PARAMS param_array
###    # variable setting -----------------------------
###    set mod_str        [lindex $COMPONENT 0]
###    set ENTITY         [lindex $COMPONENT 0]
###    set mod_base       [lindex $COMPONENT 1]
###    set ENTITY_BASE    [lindex $COMPONENT 1]
###    set ENTITY_MODFILE "$ENTITY_BASE/Modules.tcl"
###    set mod_base_str   [format "%s%s" $mod_str "_BASE"]
###    set $mod_base_str  $mod_base
###    set $mod_str       [lindex $COMPONENT 2]
###    set ARCHGRP        [lindex $COMPONENT 2]
###    if { [llength $COMPONENT] == 4 } {
###       set inst_list [lindex $COMPONENT 3]
###    } else {
###       set inst_list ""
###    }
### 
###    # label printing ------------------------------
###    if { $LEVEL == 1 } {
###       PrintLabel $mod_str
###    }
### 
###    # script execution ----------------------------
###    set MOD ""
###    set SV_LIB ""
###    set COMPONENTS ""
###    set PACKAGES ""
###    
###    # Disable compilation of additional stuff from Modules.tcl
###    set SECOND_PASS "1"
### 
###    source $mod_base/Modules.tcl
### 
###    # get list of instances  ----------------------
###    if { $inst_list != "" } {
###        foreach i $inst_list {
###           # set instance path and architecture
###           if { $LEVEL == 1 } {
###             set inst_path [lindex $i 0]
###           } else {
###             set inst_path [format "%s.%s" $PATH [lindex $i 0]]
###           }
###           set inst_arch [lindex $i 1]
### 
###           # apply procedure to current instance 
###           set eval_cmd "$COMMAND $mod_base $mod_str $inst_arch $inst_path param_array"
###           eval $eval_cmd
###  
###           # apply command to instances in subcomponents 
###           if { $COMPONENTS != "" } {
###              ApplyToInstances $COMPONENTS $COMMAND param_array $inst_path [expr $LEVEL + 1]
###           }
###        }
###    }
### }
### proc RemoveVars {VARS} {
###    foreach i $VARS {
###       if { [info exist $i] } {
###          unset $i
###       }
###    }
### }
## proc EvalFile { FILE } {
##    # This environment variable makes sure that nothing is actually compiled.
##    # Only the file list is created in Vivado.prj file.
##    global env
##    if {[info exist env(VIVADO_FILELIST_ONLY)]} {
##       set filedesc [open "Vivado.prj" "a+"]
##       if { [llength $FILE] == 2 } {
##          set FNAME [lindex $FILE 1]
##       } else {
##          set FNAME $FILE
##       }
##       puts $filedesc "$FILE"
##       close $filedesc
##       if { [file tail $FNAME] == "DevTree.tcl" } {
##          set dt_paths [open "DevTree_paths.txt" "a+"]
##          puts $dt_paths "$FNAME"
##          close $dt_paths
##       }
##    } else {
##       # Environment variable was not set, proceed normally.
##       if { [llength $FILE] == 2 } {
##          # Add to library different to work
##          set FNAME [lindex $FILE 1]
##          set LIB [lindex $FILE 0]
##          add_files -norecurse $FNAME
##          set_property LIBRARY $LIB [get_files $FNAME]
##          set vhdlfiles [get_files -filter {FILE_TYPE == VHDL} $FNAME]
##          if {$vhdlfiles ne ""} {set_property FILE_TYPE {VHDL 2008} $vhdlfiles}
##       } else {
##          # Add to library work
##          set FNAME $FILE
##          set LIB "work"
##          add_files -norecurse $FNAME
##          set vhdlfiles [get_files -filter {FILE_TYPE == VHDL} $FNAME]
##          if {$vhdlfiles ne ""} {set_property FILE_TYPE {VHDL 2008} $vhdlfiles}
##       }
##       puts "Library $LIB: File added: $FNAME"
##    }
## }
## proc EvalComp {ENTITY ENTITY_BASE ARCHGRP} {
##    set ENTITY_VFILE "$ENTITY_BASE/Vivado_presynth.tcl"
## 
##    if {[file exists $ENTITY_VFILE]} {
##       source $ENTITY_VFILE
##    }
## }
## proc SetupDesign { SYNTH_FLAGS } {
## 
##    # If the environment variable is set
##    global env
##    if {[info exist env(VIVADO_FILELIST_ONLY)]} {
##       # Create clear files
##       open "Vivado.prj" "w"
##       open "DevTree_paths.txt" "w"
##       # Skip the rest of proc
##       return
##    }
## 
##    upvar 1 $SYNTH_FLAGS synth
##    set FPGA    $synth(FPGA)
##    set MODULE  $synth(MODULE)
##    set OUTPUT  $synth(OUTPUT)
##    if { [info exists synth(SETUP_FLAGS)] } {
##       set SETUP_FLAGS $synth(SETUP_FLAGS)
##    } else {
##       set SETUP_FLAGS ""
##    }
## 
##    # FPGA setting
##    if { $FPGA == "xc7vh580thcg1931-2" ||
##         $FPGA == "xc7vx690tffg1157-2" || $FPGA == "xc7vx690tffg1157-3" ||
##         $FPGA == "xc7vx690tffg1927-3" || $FPGA == "xcvu125-flvb2104-2-i" ||
##         $FPGA == "xcvu7p-flvb2104-2-i-EVAL" || $FPGA == "xcvu9p-flga2104-3-e-EVAL" ||
##         $FPGA == "xcvu7p-flvb2104-2-i" || $FPGA == "xcvu7p-flvb2104-3-e" ||
##         $FPGA == "xc7a15tcpg236-2" || $FPGA == "xc7a15tlcpg236-2L" ||
##         $FPGA == "xq7a50tcs325-2I" || $FPGA == "xq7k325trf676-2I" ||
##         $FPGA == "xq7k325tlrf676-2L" || $FPGA == "xqku040-rba676-2-e" ||
##         $FPGA == "xq7v585trf1157-2I" || $FPGA == "xq7z020cl400-2I" ||
##         $FPGA == "xc7k70tfbg484-2" || $FPGA == "xc7k70tlfbg484-2L" ||
##         $FPGA == "xcku025-ffva1156-2-e" || $FPGA == "xcku3p-ffva676-2-e" ||
##         $FPGA == "xc7s50csga324-2" || $FPGA == "xc7vh580thcg1931-2" ||
##         $FPGA == "xcvu065-ffvc1517-2-e" || $FPGA == "xcvu7p-flvb2104-2-e" ||
##         $FPGA == "xa7a15tcpg236-2I" || $FPGA == "xa7z010clg225-1I" ||
##         $FPGA == "xazu2eg-sbva484-1-I" || $FPGA == "xc7z035ffg676-2" ||
##         $FPGA == "xczu2cg-sbva484-2-e"} {
##       puts "Using FPGA part $FPGA"
##    } else {
##       puts "ERROR : Unknown FPGA variable $FPGA. Only 7-series FPGAs are supported by Vivado."
##       exit 1
##    }
## 
##    # Create and open a new project with name specified by variable MODULE
##    create_project -part $FPGA -force "$OUTPUT"
## 
##    # Define default target language
##    set_param project.enableVHDL2008 1
##    set_property target_language VHDL [current_project]
##    set_property enable_vhdl_2008 1 [current_project]
## 
##    # Manual compile order (automatic is buggy in Vivado)
##    set_property source_mgmt_mode DisplayOnly [current_project]
## 
##    # apply user settings (if any)
##    if { $SETUP_FLAGS != "" } {
##       foreach i $SETUP_FLAGS {
##          if { $i == "USE_XPM_LIBRARIES" } {
##             set_property XPM_LIBRARIES {XPM_CDC} [current_project]
##          }
##          # TODO: Implement when needed
##       }
##    }
## }
## proc AddInputFiles { SYNTH_FLAGS HIERARCHY } {
##    upvar 1 $HIERARCHY hier
##    upvar 1 $SYNTH_FLAGS synth
##    set FILES [list ]
##    set SV_LIBS [list ]
## 
##    # Compile PACKAGES - if they were defined
##    if { [info exists hier(PACKAGES)] } {
##       PrintLabel "Packages Compilation"
##       ApplyToMods $hier(PACKAGES) EvalFile FILES
##    }
## 
##    # Compile components
##    if { [info exists hier(COMPONENTS)] } {
##       ApplyToComponents $hier(COMPONENTS) EvalFile FILES SV_LIBS
##    }
## 
##    # Compile MODs - if they were defined
##    if { [info exists hier(MOD)] } {
##       PrintLabel "MODs Compilation"
##       ApplyToMods $hier(MOD) EvalFile FILES
##    }
## 
##    # Compile Top Level
##    if { [info exists hier(TOP_LEVEL)] } {
##       PrintLabel "Top Level Compilation"
##       ApplyToMods $hier(TOP_LEVEL) EvalFile FILES
##    }
## 
##    # Check if constraints files were defined
##    if { [info exists synth(CONSTR)] } {
##       set CONSTR $synth(CONSTR)
##    } else {
##       set CONSTR ""
##    }
## 
##    # Skip the rest if environment variable is set
##    global env
##    if {[info exist env(VIVADO_FILELIST_ONLY)]} {
##       if { $CONSTR != "" } {
##          ApplyToMods $synth(CONSTR) EvalFile FILES
##       }
##       return
##    }
## 
##    # Add constraints files
##    if { $CONSTR != "" } {
##       PrintLabel "Constraints Compilation"
##       foreach f $CONSTR {
##          add_files -fileset constrs_1 -norecurse $f
##       }
##    }
## 
##    # Define toplevel module
##    if { [info exist synth(MODULE)] } {
##       set_property top $synth(MODULE) [current_fileset]
##    }
## }
## proc SynthetizeDesign { SYNTH_FLAGS } {
##    upvar 1 $SYNTH_FLAGS synth
##    set OUTPUT $synth(OUTPUT)
## 
##    # Skip the rest if environment variable is set
##    global env
##    if {[info exist env(VIVADO_FILELIST_ONLY)]} {
##       return
##    }
## 
##    PrintLabel "Synthesis Properties Setting"
## 
##    # VHDL standard settings (VHDL-2008 support, backward compatibility)
##    if { [info exist synth(VHDL2008)] } {
##       puts "VHDL-2008 standard support set to: $synth(VHDL2008)"
##       if { !$synth(VHDL2008) } {
##          set_property FILE_TYPE {VHDL} [get_files -filter {FILE_TYPE == {VHDL 2008}}]
##       }
##    }
## 
##    # Set fanout limit
##    if {[info exist synth(FANOUT_LIMIT)] } {
##       puts "Fanout limit set to: $synth(FANOUT_LIMIT)"
##       set_property -name {STEPS.SYNTH_DESIGN.ARGS.FANOUT_LIMIT} \
##       -value $synth(FANOUT_LIMIT) -objects [get_runs synth_1]
##    }
## 
##    # Set resource sharing
##    if {[info exist synth(RESOURCE_SHARING)] } {
##       puts "Resource sharing set to: $synth(RESOURCE_SHARING)"
##       set_property -name {STEPS.SYNTH_DESIGN.ARGS.RESOURCE_SHARING} \
##       -value $synth(RESOURCE_SHARING) -objects [get_runs synth_1]
##    }
## 
##    # Set the number of BUFGs
##    if {[info exist synth(BUFG)] } {
##       puts "The number of BUFGs set to: $synth(BUFG)"
##       set_property -name {STEPS.SYNTH_DESIGN.ARGS.BUFG} \
##       -value $synth(BUFG) -objects [get_runs synth_1]
##    }
## 
##    # Set synthesis directive
##    if {[info exist synth(SYNTH_DIRECTIVE)] } {
##       puts "Synthesis directive set to: $synth(SYNTH_DIRECTIVE)"
##       set_property -name {STEPS.SYNTH_DESIGN.ARGS.DIRECTIVE} \
##       -value $synth(SYNTH_DIRECTIVE) -objects [get_runs synth_1]
##    }
## 
##    # Set LUT combining
##    if {[info exist synth(NO_LUT_COMBINE)] } {
##       puts "LUT combining disabled: $synth(NO_LUT_COMBINE)"
##       set_property -name {STEPS.SYNTH_DESIGN.ARGS.NO_LC} \
##       -value $synth(NO_LUT_COMBINE) -objects [get_runs synth_1]
##    }
## 
##    # Set retiming
##    if {[info exist synth(RETIMING)] } {
##       puts "Retiming enabled: $synth(RETIMING)"
##       set_property -name {STEPS.SYNTH_DESIGN.ARGS.RETIMING} \
##       -value $synth(RETIMING) -objects [get_runs synth_1]
##    }
## 
##    # Set build generics of toplevel entity
##    if {[info exist synth(USER_GENERICS)]} {
##       set MOREOPT ""
##       foreach g $synth(USER_GENERICS) {
##          append MOREOPT "-generic " [lindex $g 0] "=" [lindex $g 1] " "
##       }
##       puts "User-defined generics: $MOREOPT"
##       set_property -name {STEPS.SYNTH_DESIGN.ARGS.MORE OPTIONS} \
##       -value $MOREOPT -objects [get_runs synth_1]
##    }
## 
##    # Set Out-of-context mode
##    if {[info exist synth(OOC_MODE)]} {
##       if {$synth(OOC_MODE) == "1"} {
##          set MOREOPT [get_property -name {STEPS.SYNTH_DESIGN.ARGS.MORE OPTIONS} \
##             -object [get_runs synth_1]]
##          append MOREOPT "-mode out_of_context "
##          puts "Out-of-context mode set"
##          set_property -name {STEPS.SYNTH_DESIGN.ARGS.MORE OPTIONS} \
##          -value $MOREOPT -objects [get_runs synth_1]
##       }
##    }
## 
##    # Set assertion severity level
##    if {[info exist synth(ASSERT_SEVERITY)]} {
##       set_msg_config -id {Synth 8-63} -severity WARNING -new_severity $synth(ASSERT_SEVERITY)
##       puts "Assertion severity level set to: $synth(ASSERT_SEVERITY)"
##    } else {
##       set_msg_config -id {Synth 8-63} -severity WARNING -new_severity ERROR
##    }
## 
##    # Set severity of 'sensitivity list mistake'
##    set_msg_config -id {Synth 8-614} -severity WARNING -new_severity ERROR
## 
##    # Skip synthesis if this variable is set to 1
##    if {[info exist synth(PROJ_ONLY)] } {
##       if {$synth(PROJ_ONLY) == "1"} {
##          return
##       }
##    }
## 
##    PrintLabel "Synthesize"
##    launch_runs synth_1
##    wait_on_run synth_1
##    open_run synth_1
## 
##    if {[info exist synth(SOPT_DIRECTIVE)] } {
##       PrintLabel "Post-synthesis Optimization"
##       # opt_design (See Xilinx UG904)
##       opt_design -directive $synth(SOPT_DIRECTIVE) -verbose
##    }
## 
##    PrintLabel "Report timing"
##    set_delay_model -interconnect estimated
##    set TREPORT $OUTPUT
##    append TREPORT "_synth.tim"
##    report_timing_summary -delay_type min_max -report_unconstrained -check_timing_verbose -max_paths 10 -input_pins -name timing_1 -file $TREPORT
## 
##    PrintLabel "Report Utilization"
##    set UREPORT $OUTPUT
##    append UREPORT "_synth.util"
##    report_utilization -file $UREPORT
## 
##    # Load user DRC
##    global FIRMWARE_BASE
##    source $FIRMWARE_BASE/tcl/vivado_user_drc/load.tcl
## 
##    PrintLabel "Report DRC"
##    set DRCREPORT $OUTPUT
##    append DRCREPORT "_synth.drc"
##    report_drc -file $DRCREPORT
## 
##    # Write VHDL file for netlist simulation
##    if {[info exist synth(WRITE_VHDL)] && $synth(WRITE_VHDL)} {
##       write_vhdl -mode funcsim -force "$OUTPUT.vhd"
##    }
## 
##    # Export to file
##    write_edif -force $OUTPUT
## }
## proc ImplementDesign { SYNTH_FLAGS } {
##    upvar 1 $SYNTH_FLAGS synth
##    set OUTPUT  $synth(OUTPUT)
## 
##    # Skip the rest if environment variable is set
##    global env
##    if {[info exist env(VIVADO_FILELIST_ONLY)]} {
##       return
##    }
## 
##    PrintLabel "Implementation Properties Setting"
##    # Run script wbs_pre.tcl before writing the bitstream
##    global FIRMWARE_BASE
##    set_property STEPS.WRITE_BITSTREAM.TCL.PRE [pwd]/$FIRMWARE_BASE/build/wbs_pre.tcl [get_runs impl_1]
## 
##    if {[info exist synth(IOPT_DIRECTIVE)] } {
##       puts "Implementation optimization directive set to: $synth(IOPT_DIRECTIVE)"
##       # opt_design (See Xilinx UG904)
##       set_property -name {STEPS.OPT_DESIGN.ARGS.IS_ENABLED} \
##       -value {true}        -objects [get_runs impl_1]
##       set_property -name {STEPS.OPT_DESIGN.ARGS.VERBOSE}    \
##       -value {true}        -objects [get_runs impl_1]
##       set_property -name {STEPS.OPT_DESIGN.ARGS.DIRECTIVE}  \
##       -value $synth(IOPT_DIRECTIVE) -objects [get_runs impl_1]
##    }
## 
##    # backward compatibility (run power_opt_design by default)
##    if {![info exist synth(POWER_OPT_DESIGN)] } {
##       set synth(POWER_OPT_DESIGN) true
##    }
## 
##    # power_opt_design
##    puts "Run Power Opt Design: $synth(POWER_OPT_DESIGN)"
##    set_property -name {STEPS.POWER_OPT_DESIGN.ARGS.IS_ENABLED} \
##    -value $synth(POWER_OPT_DESIGN) -objects [get_runs impl_1]
##    set_property -name {STEPS.POWER_OPT_DESIGN.ARGS.MORE OPTIONS} \
##    -value {-verbose} -objects [get_runs impl_1]
## 
##    if {[info exist synth(PLACE_DIRECTIVE)] } {
##       puts "Placer optimization directive set to: $synth(PLACE_DIRECTIVE)"
##       # place_design (See Xilinx UG904)
##       set_property -name {STEPS.PLACE_DESIGN.ARGS.DIRECTIVE}    \
##       -value $synth(PLACE_DIRECTIVE) -objects [get_runs impl_1]
##       set_property -name {STEPS.PLACE_DESIGN.ARGS.MORE OPTIONS} \
##       -value {-verbose}              -objects [get_runs impl_1]
##    }
## 
##    # backward compatibility (run post_place_power_opt_design by default)
##    if {![info exist synth(PP_POWER_OPT_DESIGN)] } {
##       set synth(PP_POWER_OPT_DESIGN) true
##    }
## 
##    # post_place_power_opt_design
##    # (currently commented out becase power_opt_design is already enabled before
##    #  placement)
## #   puts "Run Post-place Power Opt Design: $synth(PP_POWER_OPT_DESIGN)"
## #   set_property -name {STEPS.POST_PLACE_POWER_OPT_DESIGN.ARGS.IS_ENABLED} \
## #   -value $synth(PP_POWER_OPT_DESIGN) -objects [get_runs impl_1]
## #   set_property -name {STEPS.POST_PLACE_POWER_OPT_DESIGN.ARGS.MORE OPTIONS} \
## #   -value {-verbose} -objects [get_runs impl_1]
## 
##    if {[info exist synth(POPT_DIRECTIVE)] } {
##       puts "Post-place physical optimization directive set to: $synth(POPT_DIRECTIVE)"
##       # phys_opt_design (See Xilinx UG904)
##       set_property -name {STEPS.PHYS_OPT_DESIGN.ARGS.IS_ENABLED}   \
##       -value {true}              -objects [get_runs impl_1]
##       set_property -name {STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE}    \
##       -value $synth(POPT_DIRECTIVE) -objects [get_runs impl_1]
##       set_property -name {STEPS.PHYS_OPT_DESIGN.ARGS.MORE OPTIONS} \
##       -value {-verbose}          -objects [get_runs impl_1]
##    }
## 
##    if {[info exist synth(ROUTE_DIRECTIVE)] } {
##       puts "Router optimization directive set to: $synth(ROUTE_DIRECTIVE)"
##       # route_design (See Xilinx UG904)
##       set_property -name {STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE}    \
##       -value $synth(ROUTE_DIRECTIVE)  -objects [get_runs impl_1]
##       set_property -name {STEPS.ROUTE_DESIGN.ARGS.MORE OPTIONS} \
##       -value {-verbose} -objects [get_runs impl_1]
##    }
## 
##    if {[info exist synth(PROUTE_POPT_DIRECTIVE)] } {
##       puts "Post-route physical optimization directive set to: $synth(PROUTE_POPT_DIRECTIVE)"
##       # phys_opt_design (See Xilinx UG904)
##       set_property -name {STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.IS_ENABLED}   \
##       -value {true}              -objects [get_runs impl_1]
##       set_property -name {STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.DIRECTIVE}    \
##       -value $synth(PROUTE_POPT_DIRECTIVE) -objects [get_runs impl_1]
##       set_property -name {STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.MORE OPTIONS} \
##       -value {-verbose}          -objects [get_runs impl_1]
##    }
## 
##    # Incremental synthesis
##    if {[info exist synth(DCP)] } {
##       puts "Incremental compile checkpoint: $synth(DCP)"
##       set_property incremental_checkpoint $synth(DCP) [get_runs impl_1]
##    }
## 
##    # Skip actual implementation if this variable is set to 1
##    if {[info exist synth(PROJ_ONLY)] } {
##       if {$synth(PROJ_ONLY) == "1"} {
##          return
##       }
##    }
## 
##    # Skip actual implementation if this variable is set to 1
##    if {[info exist synth(SYNTH_ONLY)] } {
##       if {$synth(SYNTH_ONLY) == "1"} {
##          return
##       }
##    }
## 
##    PrintLabel "Implement"
##    launch_runs impl_1
##    wait_on_run impl_1
##    open_run impl_1
## 
##    PrintLabel "Report Timing"
##    set_delay_model -interconnect actual
##    set TREPORT $OUTPUT
##    append TREPORT "_par.tim"
##    report_timing_summary -delay_type min_max -report_unconstrained -check_timing_verbose -max_paths 10 -input_pins -name timing_1 -file $TREPORT
## 
##    PrintLabel "Report Utilization"
##    set UREPORT $OUTPUT
##    append UREPORT "_par.util"
##    report_utilization -file $UREPORT
## 
##    # Load user DRC
##    global FIRMWARE_BASE
##    source $FIRMWARE_BASE/tcl/vivado_user_drc/load.tcl
## 
##    PrintLabel "Report DRC"
##    set DRCREPORT $OUTPUT
##    append DRCREPORT "_par.drc"
##    report_drc -file $DRCREPORT
## 
##    if {[info exist synth(DCP)] } {
##       PrintLabel "Report Incremental Reuse"
##       set RREPORT $OUTPUT
##       append RREPORT "_par.reuse"
##       report_incremental_reuse -file $RREPORT
##    }
## 
##    # Write checkpoint for future reuse
##    set DCP $OUTPUT
##    append DCP ".dcp"
##    write_checkpoint -force $DCP
## }
## proc SaveDesign { SYNTH_FLAGS } {
##    upvar 1 $SYNTH_FLAGS synth
##    set OUTPUT  $synth(OUTPUT)
## 
##    # Skip the rest if environment variable is set
##    global env
##    if {[info exist env(VIVADO_FILELIST_ONLY)]} {
##       return
##    }
## 
##    PrintLabel "Save & Close"
## 
##    # Skip bitfile generation if this variable is set to 1
##    if {[info exist synth(PROJ_ONLY)] } {
##       if {$synth(PROJ_ONLY) == "1"} {
##          close_project
##          return
##       }
##    }
## 
##    # Skip bitfile generation if this variable is set to 1
##    if {[info exist synth(SYNTH_ONLY)] } {
##       if {$synth(SYNTH_ONLY) == "1"} {
##          close_project
##          return
##       }
##    }
## 
##    if {[info exist synth(MCS_IFACE)] } {
##       set MEM_IFACE "$synth(MCS_IFACE)"
##    } else {
##       set MEM_IFACE "SMAPx16"
##    }
## 
##    # Manually run the pre-write bitstream script
##    global FIRMWARE_BASE
##    source $FIRMWARE_BASE/build/wbs_pre.tcl
## 
##    set BITFILE [pwd]/$OUTPUT
##    append BITFILE ".bit"
##    write_bitstream -force $BITFILE
## 
##    set MCSFILE [pwd]/$OUTPUT
##    append MCSFILE ".mcs"
##    write_cfgmem -force -format MCS -size 64 -interface $MEM_IFACE -loadbit "up 0 $BITFILE" $MCSFILE
## 
##    # Close project
##    close_project
## 
## }
## proc CheckTiming { SYNTH_FLAGS } {
##    upvar 1 $SYNTH_FLAGS synth
##    set OUTPUT  $synth(OUTPUT)
## 
##    # Skip the rest if environment variable is set
##    global env
##    if {[info exist env(VIVADO_FILELIST_ONLY)]} {
##       return
##    }
## 
##    # Skip actual check if this variable is set to 1
##    if {[info exist synth(PROJ_ONLY)] } {
##       if {$synth(PROJ_ONLY) == "1"} {
##          return
##       }
##    }
## 
##    # Skip actual check if this variable is set to 1
##    if {[info exist synth(SYNTH_ONLY)] } {
##       if {$synth(SYNTH_ONLY) == "1"} {
##          return
##       }
##    }
## 
##    set TREPORT $OUTPUT
##    append TREPORT "_par.tim"
##    set fp [open $TREPORT]
##    # Search the file for the sentence
##    while {[gets $fp line] >= 0} {
##       if {[regexp "Timing constraints are not met." $line]} {
##          puts "Timing constraints were NOT met!"
##          close $fp
##          set fp [open $TREPORT]
##          # Search the file for TNS and WNS
##          while {[gets $fp line] >= 0} {
##             if {[regexp "WNS" $line]} {
##                gets $fp line
##                gets $fp line
##                set WNSTNS [regexp -all -inline {\S+} $line]
##                puts -nonewline "WNS = "
##                puts [lindex $WNSTNS 0]
##                puts -nonewline "TNS = "
##                puts [lindex $WNSTNS 1]
##                return
##             }
##          }
##          return
##       }
##    }
##    puts "All constraints were met."
## }
## proc SynthesizeProject { SYNTH_FLAGS HIERARCHY } {
##    upvar 1 $SYNTH_FLAGS synth_array
##    upvar 1 $HIERARCHY hier_array
## 
##    # synthesis setting
##    SetupDesign synth_array
## 
##    # add input files
##    AddInputFiles synth_array hier_array
## 
##    # design synthesis
##    SynthetizeDesign synth_array
## 
##    # design implementation
##    ImplementDesign synth_array
## 
##    # design saving
##    SaveDesign synth_array
## 
##    # quick design check
##    CheckTiming synth_array
## }
## proc get_all_log_files {} {
## 
##    # get a list of all log files in the current directory
##    set MAIN_LOGFILES [glob *.log]
## 
##    # construct a list of paths to all utilized log files
##    set LOGFILES $MAIN_LOGFILES
##    foreach LOGFILE $MAIN_LOGFILES {
## 
##       # open the current log file for reading
##       set LOGFILE_HANDLE [open $LOGFILE "r"]
## 
##       # read the current log file and extract all references to runme.log files
##       while { [gets $LOGFILE_HANDLE LINE] >= 0 } {
##          # paths to runme.log files are in the vivado.tcl present on lines
##          # starting with "Run output will be captured here: "
##          if { [regexp "(^Run output will be captured here: )(.*)" $LINE -> MSG PATH] } {
##             lappend LOGFILES $PATH
##          }
##       }
##    }
## 
##    # return a list of unique paths
##    return [lsort -unique $LOGFILES]
## }
## proc get_all_msg_lines { FILENAME } {
## 
##    # open the given file for reading
##    set LOGFILE [open $FILENAME "r"]
## 
##    # extract all message lines into the MSG_LINES list
##    set MSG_LINES [list ]
##    while { [gets $LOGFILE LINE] >= 0 } {
##       if { [regexp "^INFO" $LINE] } {
##          lappend MSG_LINES $LINE
##       } elseif { [regexp "^WARNING" $LINE] } {
##          lappend MSG_LINES $LINE
##       } elseif { [regexp "^CRITICAL WARNING" $LINE] } {
##          lappend MSG_LINES $LINE
##       } elseif { [regexp "^ERROR" $LINE] } {
##          lappend MSG_LINES $LINE
##       }
##    }
## 
##    # return the list
##    return $MSG_LINES
## }
# SetupDesign SYNTH_FLAGS
Using FPGA part xcvu7p-flvb2104-2-i
# AddInputFiles SYNTH_FLAGS HIERARCHY
-----------------------------------------------------------------------
                        Packages Compilation
-----------------------------------------------------------------------
-----------------------------------------------------------------------
                            pattern_match
-----------------------------------------------------------------------
## global FIRMWARE_BASE
## set COMP_BASE                   "$FIRMWARE_BASE/comp"
## set MOD "$MOD $ENTITY_BASE/pm_ent.vhd"
## set MOD "$MOD $ENTITY_BASE/pm_http-attacks.vhd"
## set COMPONENTS [list \
## 
## ]
Library work: File added: /home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/pm_ent.vhd
Library work: File added: /home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/pm_http-attacks.vhd
-----------------------------------------------------------------------
                          MODs Compilation
-----------------------------------------------------------------------
-----------------------------------------------------------------------
                       Constraints Compilation
-----------------------------------------------------------------------
# SynthetizeDesign SYNTH_FLAGS
-----------------------------------------------------------------------
                    Synthesis Properties Setting
-----------------------------------------------------------------------
Out-of-context mode set
-----------------------------------------------------------------------
                             Synthesize
-----------------------------------------------------------------------
[Tue Jan 23 01:37:42 2018] Launched synth_1...
Run output will be captured here: /home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/pattern_match.runs/synth_1/runme.log
[Tue Jan 23 01:37:42 2018] Waiting for synth_1 to finish...

*** Running vivado
    with args -log pattern_match.vds -m64 -product Vivado -mode batch -messageDb vivado.pb -notrace -source pattern_match.tcl


****** Vivado v2017.4 (64-bit)
  **** SW Build 2086221 on Fri Dec 15 20:54:30 MST 2017
  **** IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
    ** Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.

source pattern_match.tcl -notrace
Command: synth_design -top pattern_match -part xcvu7p-flvb2104-2-i -mode out_of_context
Starting synth_design
Attempting to get a license for feature 'Synthesis' and/or device 'xcvu7p'
INFO: [Common 17-349] Got license for feature 'Synthesis' and/or device 'xcvu7p'
INFO: Launching helper process for spawning children vivado processes
INFO: Helper process launched with PID 16027 
---------------------------------------------------------------------------------
Starting RTL Elaboration : Time (s): cpu = 00:00:06 ; elapsed = 00:00:07 . Memory (MB): peak = 1390.785 ; gain = 87.992 ; free physical = 4876 ; free virtual = 13305
---------------------------------------------------------------------------------
INFO: [Synth 8-638] synthesizing module 'pattern_match' [/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/pm_http-attacks.vhd:5]
	Parameter DATA_WIDTH bound to: 8 - type: integer 
WARNING: [Synth 8-3848] Net reg_q313_in in module/entity pattern_match does not have driver. [/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/pm_http-attacks.vhd:26]
INFO: [Synth 8-256] done synthesizing module 'pattern_match' (1#1) [/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/pm_http-attacks.vhd:5]
---------------------------------------------------------------------------------
Finished RTL Elaboration : Time (s): cpu = 00:00:57 ; elapsed = 00:01:11 . Memory (MB): peak = 1665.230 ; gain = 362.438 ; free physical = 4691 ; free virtual = 13124
---------------------------------------------------------------------------------

Report Check Netlist: 
+------+------------------+-------+---------+-------+------------------+
|      |Item              |Errors |Warnings |Status |Description       |
+------+------------------+-------+---------+-------+------------------+
|1     |multi_driven_nets |      0|        0|Passed |Multi driven nets |
+------+------------------+-------+---------+-------+------------------+
---------------------------------------------------------------------------------
Finished RTL Optimization Phase 1 : Time (s): cpu = 00:01:00 ; elapsed = 00:01:14 . Memory (MB): peak = 1665.230 ; gain = 362.438 ; free physical = 4733 ; free virtual = 13166
---------------------------------------------------------------------------------
INFO: [Device 21-403] Loading part xcvu7p-flvb2104-2-i
INFO: [Project 1-570] Preparing netlist for logic optimization

Processing XDC Constraints
Initializing timing engine
Parsing XDC File [/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/Vivado.xdc]
Finished Parsing XDC File [/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/Vivado.xdc]
Completed Processing XDC Constraints

INFO: [Project 1-111] Unisim Transformation Summary:
No Unisim elements were transformed.

Constraint Validation Runtime : Time (s): cpu = 00:00:00.07 ; elapsed = 00:00:00.04 . Memory (MB): peak = 2558.301 ; gain = 1.000 ; free physical = 3828 ; free virtual = 12262
---------------------------------------------------------------------------------
Finished Constraint Validation : Time (s): cpu = 00:01:19 ; elapsed = 00:01:45 . Memory (MB): peak = 2558.301 ; gain = 1255.508 ; free physical = 3950 ; free virtual = 12383
---------------------------------------------------------------------------------
INFO: [Synth 8-5580] Multithreading enabled for synth_design using a maximum of 4 processes.
---------------------------------------------------------------------------------
Finished RTL Optimization Phase 2 : Time (s): cpu = 00:01:35 ; elapsed = 00:02:03 . Memory (MB): peak = 2558.301 ; gain = 1255.508 ; free physical = 3022 ; free virtual = 11456
---------------------------------------------------------------------------------

Report RTL Partitions: 
+-+--------------+------------+----------+
| |RTL Partition |Replication |Instances |
+-+--------------+------------+----------+
+-+--------------+------------+----------+
---------------------------------------------------------------------------------
Start RTL Component Statistics 
---------------------------------------------------------------------------------
Detailed RTL Component Info : 
+---Registers : 
	                7 Bit    Registers := 1     
	                4 Bit    Registers := 2     
	                3 Bit    Registers := 1     
	                2 Bit    Registers := 2     
	                1 Bit    Registers := 1     
+---Muxes : 
	   2 Input      7 Bit        Muxes := 1     
	  90 Input      7 Bit        Muxes := 1     
	  14 Input      4 Bit        Muxes := 1     
	  10 Input      4 Bit        Muxes := 1     
	   2 Input      3 Bit        Muxes := 1     
	   6 Input      3 Bit        Muxes := 1     
	   2 Input      2 Bit        Muxes := 2     
	   4 Input      2 Bit        Muxes := 2     
	   2 Input      1 Bit        Muxes := 380   
---------------------------------------------------------------------------------
Finished RTL Component Statistics 
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start RTL Hierarchical Component Statistics 
---------------------------------------------------------------------------------
Hierarchical RTL Component report 
Module pattern_match 
Detailed RTL Component Info : 
+---Registers : 
	                7 Bit    Registers := 1     
	                4 Bit    Registers := 2     
	                3 Bit    Registers := 1     
	                2 Bit    Registers := 2     
	                1 Bit    Registers := 1     
+---Muxes : 
	   2 Input      7 Bit        Muxes := 1     
	  90 Input      7 Bit        Muxes := 1     
	  14 Input      4 Bit        Muxes := 1     
	  10 Input      4 Bit        Muxes := 1     
	   2 Input      3 Bit        Muxes := 1     
	   6 Input      3 Bit        Muxes := 1     
	   2 Input      2 Bit        Muxes := 2     
	   4 Input      2 Bit        Muxes := 2     
	   2 Input      1 Bit        Muxes := 380   
---------------------------------------------------------------------------------
Finished RTL Hierarchical Component Statistics
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Part Resource Summary
---------------------------------------------------------------------------------
Part Resources:
DSPs: 4560 (col length:120)
BRAMs: 2880 (col length: RAMB18 240 RAMB36 120)
---------------------------------------------------------------------------------
Finished Part Resource Summary
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Cross Boundary and Area Optimization
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Cross Boundary and Area Optimization : Time (s): cpu = 00:01:52 ; elapsed = 00:02:44 . Memory (MB): peak = 2558.301 ; gain = 1255.508 ; free physical = 349 ; free virtual = 8149
---------------------------------------------------------------------------------

Report RTL Partitions: 
+-+--------------+------------+----------+
| |RTL Partition |Replication |Instances |
+-+--------------+------------+----------+
+-+--------------+------------+----------+
---------------------------------------------------------------------------------
Start Applying XDC Timing Constraints
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Applying XDC Timing Constraints : Time (s): cpu = 00:02:04 ; elapsed = 00:03:17 . Memory (MB): peak = 2805.383 ; gain = 1502.590 ; free physical = 168 ; free virtual = 7733
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Timing Optimization
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Timing Optimization : Time (s): cpu = 00:02:05 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.410 ; gain = 1530.617 ; free physical = 184 ; free virtual = 7718
---------------------------------------------------------------------------------

Report RTL Partitions: 
+-+--------------+------------+----------+
| |RTL Partition |Replication |Instances |
+-+--------------+------------+----------+
+-+--------------+------------+----------+
---------------------------------------------------------------------------------
Start Technology Mapping
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Technology Mapping : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.410 ; gain = 1530.617 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------

Report RTL Partitions: 
+-+--------------+------------+----------+
| |RTL Partition |Replication |Instances |
+-+--------------+------------+----------+
+-+--------------+------------+----------+
---------------------------------------------------------------------------------
Start IO Insertion
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Flattening Before IO Insertion
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Flattening Before IO Insertion
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Final Netlist Cleanup
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Final Netlist Cleanup
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished IO Insertion : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.414 ; gain = 1530.621 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------

Report Check Netlist: 
+------+------------------+-------+---------+-------+------------------+
|      |Item              |Errors |Warnings |Status |Description       |
+------+------------------+-------+---------+-------+------------------+
|1     |multi_driven_nets |      0|        0|Passed |Multi driven nets |
+------+------------------+-------+---------+-------+------------------+
---------------------------------------------------------------------------------
Start Renaming Generated Instances
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Renaming Generated Instances : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.414 ; gain = 1530.621 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------

Report RTL Partitions: 
+-+--------------+------------+----------+
| |RTL Partition |Replication |Instances |
+-+--------------+------------+----------+
+-+--------------+------------+----------+
---------------------------------------------------------------------------------
Start Rebuilding User Hierarchy
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Rebuilding User Hierarchy : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.414 ; gain = 1530.621 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Renaming Generated Ports
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Renaming Generated Ports : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.414 ; gain = 1530.621 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Handling Custom Attributes
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Handling Custom Attributes : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.414 ; gain = 1530.621 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Renaming Generated Nets
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Renaming Generated Nets : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.414 ; gain = 1530.621 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Writing Synthesis Report
---------------------------------------------------------------------------------

Report BlackBoxes: 
+-+--------------+----------+
| |BlackBox name |Instances |
+-+--------------+----------+
+-+--------------+----------+

Report Cell Usage: 
+------+-----+------+
|      |Cell |Count |
+------+-----+------+
|1     |LUT2 |    41|
|2     |LUT3 |    27|
|3     |LUT4 |    48|
|4     |LUT5 |    44|
|5     |LUT6 |   278|
|6     |FDRE |    41|
|7     |FDSE |     1|
+------+-----+------+

Report Instance Areas: 
+------+---------+-------+------+
|      |Instance |Module |Cells |
+------+---------+-------+------+
|1     |top      |       |   480|
+------+---------+-------+------+
---------------------------------------------------------------------------------
Finished Writing Synthesis Report : Time (s): cpu = 00:02:06 ; elapsed = 00:03:19 . Memory (MB): peak = 2833.414 ; gain = 1530.621 ; free physical = 192 ; free virtual = 7726
---------------------------------------------------------------------------------
Synthesis finished with 0 errors, 0 critical warnings and 0 warnings.
Synthesis Optimization Runtime : Time (s): cpu = 00:01:54 ; elapsed = 00:02:59 . Memory (MB): peak = 2837.320 ; gain = 641.457 ; free physical = 4466 ; free virtual = 12000
Synthesis Optimization Complete : Time (s): cpu = 00:02:07 ; elapsed = 00:03:21 . Memory (MB): peak = 2837.320 ; gain = 1534.527 ; free physical = 4467 ; free virtual = 12001
INFO: [Project 1-571] Translating synthesized netlist
INFO: [Project 1-570] Preparing netlist for logic optimization
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
INFO: [Project 1-111] Unisim Transformation Summary:
No Unisim elements were transformed.

INFO: [Common 17-83] Releasing license: Synthesis
149 Infos, 1 Warnings, 0 Critical Warnings and 0 Errors encountered.
synth_design completed successfully
synth_design: Time (s): cpu = 00:02:09 ; elapsed = 00:03:24 . Memory (MB): peak = 2900.691 ; gain = 1634.855 ; free physical = 4498 ; free virtual = 12032
INFO: [Common 17-1381] The checkpoint '/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/pattern_match.runs/synth_1/pattern_match.dcp' has been generated.
INFO: [runtcl-4] Executing : report_utilization -file pattern_match_utilization_synth.rpt -pb pattern_match_utilization_synth.pb
report_utilization: Time (s): cpu = 00:00:00.95 ; elapsed = 00:00:01 . Memory (MB): peak = 2924.734 ; gain = 0.000 ; free physical = 4502 ; free virtual = 12037
INFO: [Common 17-206] Exiting Vivado at Tue Jan 23 01:41:16 2018...
[Tue Jan 23 01:41:17 2018] synth_1 finished
wait_on_run: Time (s): cpu = 00:02:19 ; elapsed = 00:03:35 . Memory (MB): peak = 1300.758 ; gain = 3.957 ; free physical = 6137 ; free virtual = 13668
Design is defaulting to impl run constrset: constrs_1
Design is defaulting to synth run part: xcvu7p-flvb2104-2-i
INFO: [Project 1-479] Netlist was created with Vivado 2017.4
INFO: [Device 21-403] Loading part xcvu7p-flvb2104-2-i
INFO: [Project 1-570] Preparing netlist for logic optimization
Parsing XDC File [/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/Vivado.xdc]
Finished Parsing XDC File [/home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/Vivado.xdc]
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
INFO: [Project 1-111] Unisim Transformation Summary:
No Unisim elements were transformed.

open_run: Time (s): cpu = 00:00:11 ; elapsed = 00:00:22 . Memory (MB): peak = 2217.000 ; gain = 916.242 ; free physical = 5269 ; free virtual = 12800
-----------------------------------------------------------------------
                            Report timing
-----------------------------------------------------------------------
WARNING: [Common 17-708] report_timing_summary: The '-name' option will be ignored because it is only relevant in GUI mode.
INFO: [Timing 38-35] Done setting XDC timing constraints.
INFO: [Timing 38-91] UpdateTimingParams: Speed grade: -2, Temperature grade: I, Delay Type: min_max.
INFO: [Timing 38-191] Multithreading enabled for timing update using a maximum of 8 CPUs
WARNING: [Timing 38-242] The property HD.CLK_SRC of clock port "CLK" is not set. In out-of-context mode, this prevents timing estimation for clock delay/skew
Resolution: Set the HD.CLK_SRC property of the out-of-context port to the location of the clock buffer instance in the top-level design
report_timing_summary: Time (s): cpu = 00:00:31 ; elapsed = 00:00:54 . Memory (MB): peak = 3940.559 ; gain = 1723.559 ; free physical = 4007 ; free virtual = 11540
-----------------------------------------------------------------------
                         Report Utilization
-----------------------------------------------------------------------
report_utilization: Time (s): cpu = 00:00:01 ; elapsed = 00:00:01 . Memory (MB): peak = 3940.559 ; gain = 0.000 ; free physical = 4006 ; free virtual = 11540
## set USER_DRC_BASE [file dirname [info script]]
## source $USER_DRC_BASE/latch_drc.tcl
### proc latchCheck {} {
###    # list to hold violations
###    set vios {}
###    # iterate through the objects to be checked
###    foreach latch [get_cells * -hierarchical -filter {PRIMITIVE_SUBGROUP == latch} -quiet] {      
###       # define the message & file to report when violations are found
###       set file_name [get_property FILE_NAME $latch]
###       set line_number [get_property LINE_NUMBER $latch]
###       set msg "Detected LATCH on cell %ELG \[$file_name:$line_number\]."
###       set vio [ create_drc_violation -name {LATCH-1} -msg $msg $latch ]
###       lappend vios $vio
###    }
###    if {[llength $vios] > 0} {
###       return -code error $vios
###    } else {
###       return {}
###    }
### }
### delete_drc_check -quiet {LATCH-1}
### create_drc_check -name {LATCH-1} \
###                  -desc {Report LATCHes in the design} \
###                  -hiername {User Defined} \
###                  -rule_body latchCheck
## source $USER_DRC_BASE/asreg_drc.tcl
### proc asregCheck {} {
###    # lists to hold violations and cells
###    set vios {}
###    set synccells {}
###    # get synchronous cells with async reg resets
###    foreach cell [get_cells -of_objects [all_registers -async_pins] -filter {PRIMITIVE_SUBGROUP == flop} -quiet] {
###       set parent [get_property parent $cell]
###       if {[llength $parent] > 0 && [llength [get_clocks -of_objects $parent]] == 1} {
###          lappend synccells $parent
###       }
###    }
###    # remove duplicates
###    set synccells [lsort -unique $synccells]
###    # define the message 
###    set msg "Cell %ELG with only one clock domain uses registers with async reset."
###    # create violation objects
###    foreach cell $synccells {
###       set file_name [get_property FILE_NAME $cell]
###       set line_number [get_property LINE_NUMBER $cell]
###       set msg "Cell %ELG with only one clock domain uses registers with async reset \[$file_name:$line_number\]."
###       set vio [ create_drc_violation -name {ASREG-1} -msg $msg $cell ]
###       lappend vios $vio
###    }
###    # return error code if something is found
###    if {[llength $vios] > 0} {
###       return -code error $vios
###    } else {
###       return {}
###    }
### }
### delete_drc_check -quiet {ASREG-1}
### create_drc_check -name {ASREG-1} \
###                  -desc {Report registers with async resets in the design in components with only one clock domain} \
###                  -hiername {User Defined} \
###                  -rule_body asregCheck
## source $USER_DRC_BASE/datarst_drc.tcl
### proc datarstCheck {} {
###    # list to hold vios & wide regs with rst
###    set vios {}
###    set widerstregs {}
###    # get wide buses & regs
###    set widebuses [get_nets -hierarchical -filter {BUS_WIDTH > 8}]
###    set wideregs [get_cells -of_objects $widebuses -filter {PRIMITIVE_SUBGROUP == flop}]
###    # go through wide registers
###    foreach widereg $wideregs {
###       # get used RESET pins
###       set rstpins [get_pins -of_objects $widereg -filter {REF_PIN_NAME == R && LOGIC_VALUE != zero} -quiet]
###       if {[llength $rstpins] > 0} {
###          # remove square brackets -> generics, arrays
###          regsub -all {\[(\d*)\]} $widereg "" reglbl
###          # search if exists
###          if {[lsearch $widerstregs $reglbl] == -1} {
###             lappend widerstregs $reglbl
###             set file_name [get_property FILE_NAME $widereg]
###             set line_number [get_property LINE_NUMBER $widereg]
###             set msg "Wide register '$reglbl' with reset found \[$file_name:$line_number\]."
###             set vio [ create_drc_violation -name {DATARST-1} -msg $msg ]
###             lappend vios $vio
###          }        
###       }
###    }
###    # return error code if something is found
###    if {[llength $vios] > 0} {
###       return -code error $vios
###    } else {
###       return {}
###    }
### }
### delete_drc_check -quiet {DATARST-1}
### create_drc_check -name {DATARST-1} \
###                  -desc {Report wide registers with reset in the design} \
###                  -hiername {User Defined} \
###                  -rule_body datarstCheck
-----------------------------------------------------------------------
                             Report DRC
-----------------------------------------------------------------------
Command: report_drc -file pattern_match_synth.drc
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1704] No user IP repositories specified
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/usr/local/fpga/Vivado/current/data/ip'.
INFO: [DRC 23-27] Running DRC with 8 threads
latchCheck
asregCheck
datarstCheck
WARNING: [Vivado 12-1023] No nets matched for command 'get_nets -hierarchical -filter {BUS_WIDTH > 8}'.
WARNING: [Vivado 12-180] No cells matched 'get_cells -of_objects [get_nets -hierarchical -filter {BUS_WIDTH > 8}] -filter {PRIMITIVE_SUBGROUP == flop}'.
INFO: [Coretcl 2-168] The results of DRC are in file /home/shared/xlenga00/dvorak-hw-automata-fwbase/ndk/common/comp/pattern_match/synth/pattern_match_synth.drc.
report_drc completed successfully
INFO: [Common 17-206] Exiting Vivado at Tue Jan 23 01:42:37 2018...

